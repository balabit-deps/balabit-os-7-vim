Backported of:

From 4c25bd785aa8b565bf973cbba12ed36b76daaa4f Mon Sep 17 00:00:00 2001
From: Bram Moolenaar <Bram@vim.org>
Date: Sat, 20 Apr 2019 23:38:07 +0200
Subject: [PATCH] patch 8.1.1192: mode is not cleared when leaving Insert mode
 with mapped Esc

Problem:    Mode is not cleared when leaving Insert mode with mapped Esc.
Solution:   Clear the mode when redraw_cmdline is set. (closes #4269)
diff --git a/src/globals.h b/src/globals.h
index 9f1864d..612c60f 100644
--- a/src/globals.h
+++ b/src/globals.h
@@ -92,12 +92,13 @@ EXTERN int	mod_mask INIT(= 0x0);		/* current key modifiers */
  */
 EXTERN int	cmdline_row;
 
-EXTERN int	redraw_cmdline INIT(= FALSE);	/* cmdline must be redrawn */
-EXTERN int	clear_cmdline INIT(= FALSE);	/* cmdline must be cleared */
-EXTERN int	mode_displayed INIT(= FALSE);	/* mode is being displayed */
-EXTERN int	no_win_do_lines_ins INIT(= FALSE); /* don't insert lines */
+EXTERN int	redraw_cmdline INIT(= FALSE);	// cmdline must be redrawn
+EXTERN int	redraw_mode INIT(= FALSE);	// mode must be redrawn
+EXTERN int	clear_cmdline INIT(= FALSE);	// cmdline must be cleared
+EXTERN int	mode_displayed INIT(= FALSE);	// mode is being displayed
+EXTERN int	no_win_do_lines_ins INIT(= FALSE); // don't insert lines
 #if defined(FEAT_CRYPT) || defined(FEAT_EVAL)
-EXTERN int	cmdline_star INIT(= FALSE);	/* cmdline is crypted */
+EXTERN int	cmdline_star INIT(= FALSE);	// cmdline is crypted
 #endif
 
 EXTERN int	exec_from_reg INIT(= FALSE);	/* executing register */
diff --git a/src/screen.c b/src/screen.c
index 9256fbd..e28593a 100644
--- a/src/screen.c
+++ b/src/screen.c
@@ -782,7 +782,7 @@ update_screen(int type_arg)
 
     /* Clear or redraw the command line.  Done last, because scrolling may
      * mess up the command line. */
-    if (clear_cmdline || redraw_cmdline)
+    if (clear_cmdline || redraw_cmdline || redraw_mode)
 	showmode();
 
     if (no_update)
@@ -851,7 +851,7 @@ update_prepare(void)
     static void
 update_finish(void)
 {
-    if (redraw_cmdline)
+    if (redraw_cmdline || redraw_mode)
 	showmode();
 
 # ifdef FEAT_SEARCH_EXTRA
@@ -10196,6 +10196,7 @@ screen_del_lines(
  * If clear_cmdline is TRUE, clear the rest of the cmdline.
  * If clear_cmdline is FALSE there may be a message there that needs to be
  * cleared only if a mode is shown.
+ * If redraw_mode is TRUE show or clear the mode.
  * Return the length of the message (0 if no message).
  */
     int
@@ -10385,7 +10386,7 @@ showmode(void)
 	}
 
 	mode_displayed = TRUE;
-	if (need_clear || clear_cmdline)
+	if (need_clear || clear_cmdline || redraw_mode)
 	    msg_clr_eos();
 	msg_didout = FALSE;		/* overwrite this message */
 	length = msg_col;
@@ -10395,6 +10396,11 @@ showmode(void)
     else if (clear_cmdline && msg_silent == 0)
 	/* Clear the whole command line.  Will reset "clear_cmdline". */
 	msg_clr_cmdline();
+    else if (redraw_mode)
+    {
+	msg_pos_mode();
+	msg_clr_eos();
+    }
 
 #ifdef FEAT_CMDL_INFO
     /* In Visual mode the size of the selected area must be redrawn. */
@@ -10407,6 +10413,7 @@ showmode(void)
 	win_redr_ruler(lastwin, TRUE);
 #endif
     redraw_cmdline = FALSE;
+    redraw_mode = FALSE;
     clear_cmdline = FALSE;
 
     return length;
#diff --git a/src/testdir/test_messages.vim b/src/testdir/test_messages.vim
#index 188406e..a0031bc 100644
#--- a/src/testdir/test_messages.vim
#+++ b/src/testdir/test_messages.vim
#@@ -38,3 +38,31 @@ function Test_messages()
#     let &more = oldmore
#   endtry
# endfunction
#+
#+func Test_mode_message_at_leaving_insert_with_esc_mapped()
#+  if !has('terminal') || has('gui_running')
#+    return
#+  endif
#+
#+  " Set custom statusline built by user-defined function.
#+  let testfile = 'Xtest.vim'
#+  call writefile([
#+        \ 'set laststatus=2',
#+        \ 'inoremap <Esc> <Esc>00',
#+        \ ], testfile)
#+
#+  let rows = 10
#+  let buf = term_start([GetVimProg(), '--clean', '-S', testfile], {'term_rows': rows})
#+  call term_wait(buf, 200)
#+  call assert_equal('run', job_status(term_getjob(buf)))
#+
#+  call term_sendkeys(buf, "i")
#+  call WaitForAssert({-> assert_match('^-- INSERT --\s*$', term_getline(buf, rows))})
#+  call term_sendkeys(buf, "\<Esc>")
#+  call WaitForAssert({-> assert_match('^\s*$', term_getline(buf, rows))})
#+
#+  call term_sendkeys(buf, ":qall!\<CR>")
#+  call WaitForAssert({-> assert_equal('dead', job_status(term_getjob(buf)))})
#+  exe buf . 'bwipe!'
#+  call delete(testfile)
#+endfunc
